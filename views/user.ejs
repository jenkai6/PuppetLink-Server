<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>PuppetLink</title>
    <style>
        .header{
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .orientation_list li::after{
            content: '°';
        }

        .acceleration_list li::after{
            content: 'm/s²';
        }

        .gyroscope_list li::after{
            content: '°/s';
        }

        .waiting{
            color: rgb(204, 41, 57);
        }

        .sending{
            color: rgb(10, 177, 80);
        }
    </style>
</head>

<body>
    <header class="header">
        <h1>Sensor</h1>
        <P id = "sending_state" class="waiting"></P>
    </header>
    <main>
        <button id = permission_btn>Start</button>
        <div>
            <div>
                <h3>Acceleration</h3>
                <ul class="acceleration_list">
                    <li>
                        x: <span id = acceleration_x>0</span>
                    </li>
                    <li>
                        y: <span id = acceleration_y>0</span>
                    </li>
                    <li>
                        z: <span id = acceleration_z>0</span>
                    </li>
                </ul>
            </div>
            <div>
                <h3>Acceleration including gravity</h3>
                <ul class="acceleration_list">
                    <li>
                        x: <span id = acceleration_gravity_x>0</span>
                    </li>
                    <li>
                        y: <span id = acceleration_gravity_y>0</span>
                    </li>
                    <li>
                        z: <span id = acceleration_gravity_z>0</span>
                    </li>
                </ul>
            </div>
            <div>
                <h3>Orientation</h3>
                <ul class="orientation_list">
                    <li>
                        Z-axis (α): <span id = orientation_a>0</span>
                    </li>
                    <li>
                        X-axis (β): <span id = orientation_b>0</span>
                    </li>
                    <li>
                        Y-axis (γ): <span id = orientation_g>0</span>
                    </li>
                </ul>
            </div>
            <div>
                <h3>Gyroscope</h3>
                <ul class="gyroscope_list">
                    <li>
                        Z-axis (α): <span id = gyroscope_a>0</span>
                    </li>
                    <li>
                        X-axis (β): <span id = gyroscope_b>0</span>
                    </li>
                    <li>
                        Y-axis (γ): <span id = gyroscope_g>0</span>
                    </li>
                </ul>
            </div>
        </div>
    </main>    
    <script>
        document.querySelector('#permission_btn').addEventListener('click',onClick);

        /* Sensor Template */
        // let sensor = {
        //         motionData: {
        //             acc: [],
        //             accGravity: [],
        //             gyro: []        
        //         },
        //         orientData: {
        //             orinet:[]
        //         }
        // };

        let sensor = {};
        let ws;

        function checkAndSendData(){
            if(ws.readyState !== WebSocket.OPEN)
                return;
            // 如果資料都備齊了，則傳給伺服器
            if(sensor.motionData !== null && sensor.orientData !== null){
                // JS object to JSON 資料格式
                ws.send(JSON.stringify(sensor));
            }
        }

        function onClick() {
            if (typeof DeviceMotionEvent.requestPermission === 'function') {
                // Handle iOS 13+ devices.
                DeviceMotionEvent.requestPermission()
                .then((state) => {
                    if (state === 'granted'){
                        window.addEventListener("deviceorientation", handleOrientation);
                        window.addEventListener("devicemotion", handleMotion);
                        initWebSocket();
                    } else
                        console.error('Request to access the orientation was rejected');
                })
                .catch(console.error);
            } else {
                // Handle regular non iOS 13+ devices.
                window.addEventListener("deviceorientation", handleOrientation);
                window.addEventListener("devicemotion", handleMotion);
                initWebSocket();
            }
        }

        function handleMotion(event){       
            // Sensor data     
            const accDatas = [
                event.acceleration.x, 
                event.acceleration.y, 
                event.acceleration.z
            ];

            const accGDatas = [
                event.accelerationIncludingGravity.x, 
                event.accelerationIncludingGravity.y, 
                event.accelerationIncludingGravity.z
            ];

            const gyroDatas =[
                event.acceleration.x,
                event.acceleration.y,
                event.acceleration.z
            ];
       
            // DOM element
            const accDom = [
                document.querySelector('#acceleration_x'),
                document.querySelector('#acceleration_y'),
                document.querySelector('#acceleration_z')
            ];

            const accGDom = [
                document.querySelector('#acceleration_gravity_x'),
                document.querySelector('#acceleration_gravity_y'),
                document.querySelector('#acceleration_gravity_z')
            ];

            const gyroDom = [
                document.querySelector('#gyroscope_a'),
                document.querySelector('#gyroscope_b'),
                document.querySelector('#gyroscope_g')
            ];

            // Assign to HTML
            accDom.map((e,id) => e.innerText = accDatas[id]);
            accGDom.map((e,id) => e.innerText = accGDatas[id]);
            gyroDom.map((e,id) => e.innerText = gyroDatas[id]);

            // Assign to sensor object
            sensor['motionData'] = {
                    acc: [...accDatas],
                    accGravity: [...accGDatas],
                    gyro: [...gyroDatas]        
            };
            checkAndSendData();
        }

        function handleOrientation(event) {
            // Sensor data
            const orientDatas = [event.alpha, event.beta, event.gamma];

            // DOM element
            const orientDom = [
                document.querySelector('#orientation_a'),
                document.querySelector('#orientation_b'),
                document.querySelector('#orientation_g')
            ];

            // Assign to HTML
            orientDom.map((e,id) => e.innerText = orientDatas[id]);

            // Assign to sensor object
            sensor['orientData'] = {
                orinet: [...orientDatas] 
            };
            checkAndSendData();
        }

        function initWebSocket(){   
            // 如果已經初始化了，就忽略
            if(ws) return;

            /* websocket */
            let url = 'wss://192.168.0.16:8080/user';
            // 建立 WebSocket
            ws = new WebSocket(url);
            // 當收到 server的訊息
            ws.onmessage = event =>{
                let order = Number(event.data);
                console.log(order);
                const sendingState = document.querySelector('#sending_state');
                if(order === 0){
                    sendingState.innerText = 'sending...';
                    if(!sendingState.classList.contains("sending"))
                        sendingState.classList.add("sending");
                }
                else{
                    sendingState.innerText = 'waiting...';
                    if(sendingState.classList.contains("sending"))
                        sendingState.classList.remove("sending");
                }  
            }
    
            // 當頁面被隱藏或關閉，則 webSocket 斷線
            document.addEventListener('visibilitychange', () => {
                if (document.visibilityState === 'hidden'){
                    ws.close();
                    const sendingState = document.querySelector('#sending_state');
                    sendingState.innerText = "offline";
                    if(sendingState.classList.contains("sending"))
                        sendingState.classList.remove("sending");
                }
            });
        }
    </script>
</body>

</html>